rpartFit
plot(rpartFit)
# set seed to generate reproducable results
set.seed(1)
# split raw data set into training data set and test data set
train <- sample(1:nrow(std.data), size = nrow(std.data)*0.8)
test <- dplyr::setdiff(1:nrow(std.data), train)
TrainData <- std.data[train, ]
TestData <- std.data[test, ]
# checking the dimension of our training and testing data sets
dim(TrainData)
dim(TestData)
library(caret)
# set seed to get a reproducable result
set.seed(1)
# use the repeatedcv method for 10 folds and 3 times
fitControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 3,
selectionFunction="best")
# fit the classification tree model
rpartFit <- train(death ~ .,
data = TrainData,
method = "rpart",
tuneLength = 10,
trControl = fitControl)
# get the fit result
rpartFit
plot(rpartFit)
knitr::opts_chunk$set(echo = TRUE,message = FALSE,warning = FALSE)
giniFit <- tree(death ~ .,data=TrainData,split="gini")
library(tree)
giniFit <- tree(death ~ .,data=TrainData,split="gini")
plot(giniFit)
text(giniFit, pretty = 0, cex = 0.6)
ggdendrogram(giniFit)
library(ggplot2)
ggdendrogram(giniFit)
install.packages("ggdendro")
library(ggplot2)
ggdendrogram(giniFit)
library(ggplot2)
library(ggdendro)
ggdendrogram(giniFit)
library(tree)
giniFit <- tree(death ~ time + creatinine + CPK + EF + age ,data=TrainData,split="gini")
plot(giniFit)
text(giniFit, pretty = 0, cex = 0.6)
library(tree)
giniFit <- tree(death ~ time + creatinine + CPK + EF  ,data=TrainData,split="gini")
plot(giniFit)
text(giniFit, pretty = 0, cex = 0.6)
library(tree)
giniFit <- tree(death ~ time + creatinine  ,data=TrainData,split="gini")
plot(giniFit)
text(giniFit, pretty = 0, cex = 0.6)
library(tree)
giniFit <- tree(death ~ time + creatinine  ,data=std.data,split="gini")
plot(giniFit)
text(giniFit, pretty = 0, cex = 0.6)
library(tree)
giniFit <- tree(death ~ time + creatinine ,data=std.data,split="deviance")
plot(giniFit)
text(giniFit, pretty = 0, cex = 0.6)
View(std.data)
library(tree)
giniFit <- tree(as.factor(death) ~ time + creatinine ,data=std.data,split="deviance")
plot(giniFit)
text(giniFit, pretty = 0, cex = 0.6)
library(tree)
giniFit <- tree(as.factor(death) ~ time + creatinine ,data=std.data,split="gini")
plot(giniFit)
text(giniFit, pretty = 0, cex = 0.6)
library(tree)
giniFit <- tree(as.factor(death) ~ time + creatinine ,data=std.data,split="deviance")
plot(giniFit)
text(giniFit, pretty = 0, cex = 0.6)
std.data <- cbind(scale(x=data[c(1,3,5,7,8,9,12)]),data[c(2,4,6,10,11)])
pc.out <- prcomp(std.data)
pc.out
summary(pc.out)
plot(pc.out,type="l")
pca3d(pc.out,components = 1:3,group=data$survive)
pca3d(pc.out,components = 4:6,group=data$survive)
# snapshotPCA3d(file="second_plot.png")
pca2d(pc.out,group=data$survive,biplot = T, biplot.vars = 3)
# snapshotPCA3d(file="second_plot.png")
pca2d(pc.out,group=data$survive,biplot = T, biplot.vars = 6)
# snapshotPCA3d(file="second_plot.png")
pca2d(pc.out,group=data$survive,biplot = T, biplot.vars = 10)
# snapshotPCA3d(file="second_plot.png")
pca2d(pc.out,group=data$survive,biplot = T, biplot.vars = 6)
library(tree)
treeFit <- tree(as.factor(death) ~ time + creatinine ,data=std.data,split="deviance")
library(tree)
std.data2 <- cbind(std.data,data$survive)
treeFit <- tree(survive ~ time + creatinine ,data=std.data2,split="deviance")
View(std.data2)
library(tree)
std.data2 <- cbind(std.data,data$survive)
treeFit <- tree(data$survive ~ time + creatinine ,data=std.data2,split="deviance")
plot(treeFit)
text(treeFit, pretty = 0, cex = 0.6)
summary(treeFit)
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
plot(pruneFit$size,pruneFit$dev,type="b")
library(tree)
std.data2 <- cbind(std.data,data$survive)
treeFit <- tree(data$survive ~ time + creatinine ,data=std.data2,split="deviance")
plot(treeFit)
text(treeFit, pretty = 0, cex = 0.6)
summary(treeFit)
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
plot(pruneFit$size,pruneFit$dev,type="b")
pruneFitFinal <- prune.misclass(treeFit,best=2)
predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=10),type="class")
predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=10),type="class")
predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=30),type="class")
predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=0),type="class")
predict(pruneFitFinal, newdata = data.frame(time=0, creatinine=10),type="class")
library(tree)
std.data2 <- cbind(std.data,data$survive)
treeFit <- tree(data$survive ~ time + creatinine ,data=std.data2,split="deviance")
plot(treeFit)
text(treeFit, pretty = 0, cex = 0.6)
summary(treeFit)
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
plot(pruneFit$size,pruneFit$dev,type="b")
pruneFitFinal <- prune.misclass(treeFit,best=2)
predict(pruneFitFinal, newdata = data.frame(time=0, creatinine=10),type="class")
library(tree)
treeFit <- tree(survive ~ time + creatinine ,data=data,split="deviance")
plot(treeFit)
text(treeFit, pretty = 0, cex = 0.6)
summary(treeFit)
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
plot(pruneFit$size,pruneFit$dev,type="b")
pruneFitFinal <- prune.misclass(treeFit,best=2)
predict(pruneFitFinal, newdata = data.frame(time=0, creatinine=10),type="class")
library(tree)
treeFit <- tree(survive ~ time + creatinine ,data=data,split="deviance")
plot(treeFit)
text(treeFit, pretty = 0, cex = 0.6)
summary(treeFit)
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
plot(pruneFit$size,pruneFit$dev,type="b")
pruneFitFinal <- prune.misclass(treeFit,best=2)
predict(pruneFitFinal, newdata = data.frame(time=75, creatinine=10),type="class")
library(tree)
treeFit <- tree(survive ~ time + creatinine ,data=data,split="deviance")
plot(treeFit)
text(treeFit, pretty = 0, cex = 0.6)
summary(treeFit)
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
plot(pruneFit$size,pruneFit$dev,type="b")
pruneFitFinal <- prune.misclass(treeFit,best=2)
predict(pruneFitFinal, newdata = data.frame(time=75, creatinine=2),type="class")
predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2),type="class")
library(tree)
treeFit <- tree(survive ~ time + creatinine ,data=data,split="deviance")
plot(treeFit)
text(treeFit, pretty = 0, cex = 0.6)
summary(treeFit)
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
plot(pruneFit$size,pruneFit$dev,type="b")
pruneFitFinal <- prune.misclass(treeFit,best=2)
# user predict to change the variable value (need to split the categorical data and numeric data)
predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2),type="class")
glmFit <- glm(survive ~ ., data=data,family = "binomial")
glmFit
library(tree)
# fit the tree model
treeFit <- tree(survive ~ time + creatinine ,data=data,split="deviance")
# result of tree model
summary(treeFit)
# dendrogram
plot(treeFit)
text(treeFit, pretty = 0, cex = 0.6)
# giveing the referrence result for choosing tree size
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
# giveing the referrence plot for choosing tree size
plot(pruneFit$size,pruneFit$dev,type="b")
pruneFitFinal <- prune.misclass(treeFit,best=2) # choose the tree size in best option
# user predict to change the variable value (need to split the categorical data and numeric data)
predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2),type="class")
summary(glmFit)
glmFit <- glm(survive ~ time + creatinine, data=data,family = "binomial")
glmFit
summary(glmFit)
exp(predict(glmFit, newdata = data.frame(time=10, creatinine=2),type="link"))
pca3d(pc.out,components = 1:3,group=data$survive)
pca3d(pc.out,components = 4:6,group=data$survive)
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(readr)
library(ggplot2)
library(GGally)
library(plotly)
library(pca3d)
library(tree)
plot(treeFit)
data_factor_tree <- factorData %>% select(time, creatinine,survive)
knitr::opts_chunk$set(echo = TRUE)
library(DT)
library(tidyverse)
library(readr)
library(ggplot2)
library(GGally)
library(plotly)
library(pca3d)
library(tree)
# read in raw data
data <- read_csv("heart_failure_clinical_records_dataset.csv") %>%
# change the variable names
rename( "CPK"=creatinine_phosphokinase,
"EF" = ejection_fraction,
"HT" = high_blood_pressure,
"creatinine" = serum_creatinine,
"sodium" = serum_sodium,
"death" = DEATH_EVENT) %>%
# create a new variable called survive
mutate(survive = 1-death) %>% select (-"death")
# create a new data set which is similar with data
factorData <- data
# change the boolean variable into categorical data
factorData$anaemia <- as.factor(factorData$anaemia)
factorData$diabetes <- as.factor(factorData$diabetes)
factorData$HT <- as.factor(factorData$HT)
factorData$sex <- as.factor(factorData$sex)
factorData$smoking <- as.factor(factorData$smoking)
factorData$survive <- as.factor(factorData$survive)
data_factor_tree <- factorData %>% select(time, creatinine,survive)
# fit the tree model
treeFit <- tree(survive ~ . ,data=data_factor_tree,split="deviance")
# result of tree model
summary(treeFit)
# tree model plot
plot(treeFit)
text(treeFit, pretty = 0, cex = 1)
plot(treeFit)
text(treeFit, pretty = 1, cex = 1)
plot(treeFit)
text(treeFit, pretty = 0, cex = 1)
plot(treeFit)
text(treeFit, pretty = 0, cex = 1)
plot(treeFit)
text(treeFit, pretty = 0, cex = 0.8)
plot(treeFit)
text(treeFit, pretty = 0, cex = 0.9)
summary(pruneFit)
pruneFit
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
# referrence plot for choosing tree size
plot(pruneFit$size,pruneFit$dev,type="b",col="#990000",lwd=2,title="title")
# referrence plot for choosing tree size
plot(pruneFit$size,pruneFit$dev,type="b",col="#990000",lwd=2,main="title")
# referrence plot for choosing tree size
plot(pruneFit$size,pruneFit$dev,type="b",col="#990000",lwd=2,main="title",xlab="size",ylab="deviance")
# prepare data for tree model
data_factor_tree <- factorData %>% select(time, creatinine,survive)
# fit the tree model
treeFit <- tree(survive ~ . ,data=data_factor_tree,split="deviance")
# result of tree model
summary(treeFit)
# tree model plot
plot(treeFit)
text(treeFit, pretty = 0, cex = 1)
# referrence result for choosing tree size
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
data.frame(size=pruneFit$size,deviance=pruneFit$dev)
# referrence plot for choosing tree size
plot(pruneFit$size,pruneFit$dev,type="b",col="#990000",lwd=2,main="title",xlab="size",ylab="deviance")
# prune for better prediction
pruneFitFinal <- prune.misclass(treeFit,best=2) # choose the tree size in best option
# tree model plot after pruning
plot(pruneFitFinal)
text(pruneFitFinal, pretty = 0, cex = 1)
# user predict to change the variable value (need to split the categorical data and numeric data)
predClass <- predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2),type="class")
# prediction results
if (predClass == 1){
print("survive = 1")
} else {
print("survive = 0")
}
# prepare data for pca
data_numeric_pc  <- data %>% select(age,CPK,EF,platelets,creatinine,sodium,time)
# PCA
pc.out <- prcomp(data_numeric_pc,scale = T)
# referrence
test <- summary(pc.out)
data.frame(test$importance)
screeplot(pc.out,type="lines",col="#990000",lwd=2)
# rotation
data.frame(round(pc.out$rotation[,1:3],3))
# 3dplot of pc
pca3d(pc.out,components = c(1,2,3),group=data$survive, legend="right")
# save the screenshot of 3dplot
## snapshotPCA3d(file="second_plot.png")
# biplot
pca2d(pc.out,components = c(1,2),group=data$survive,biplot = T, biplot.vars = 7, legend="right")
# prepare data for tree model
data_factor_tree <- factorData %>% select(time, creatinine,survive)
# fit the tree model
treeFit <- tree(survive ~ . ,data=data_factor_tree,split="deviance")
# result of tree model
summary(treeFit)
# tree model plot
plot(treeFit)
text(treeFit, pretty = 0, cex = 1)
# referrence result for choosing tree size
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
data.frame(size=pruneFit$size,deviance=pruneFit$dev)
# referrence plot for choosing tree size
plot(pruneFit$size,pruneFit$dev,type="b",col="#990000",lwd=2,main="title",xlab="size",ylab="deviance")
# prune for better prediction
pruneFitFinal <- prune.misclass(treeFit,best=2) # choose the tree size in best option
# tree model plot after pruning
plot(pruneFitFinal,col="steelblue")
text(pruneFitFinal, pretty = 0, cex = 1)
# user predict to change the variable value (need to split the categorical data and numeric data)
predClass <- predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2),type="class")
# prediction results
if (predClass == 1){
print("survive = 1")
} else {
print("survive = 0")
}
# prepare data for tree model
data_factor_tree <- factorData %>% select(time, creatinine,survive)
# fit the tree model
treeFit <- tree(survive ~ . ,data=data_factor_tree,split="deviance")
# result of tree model
summary(treeFit)
# tree model plot
plot(treeFit,"steelblue")
text(treeFit, pretty = 0, cex = 1)
# referrence result for choosing tree size
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
data.frame(size=pruneFit$size,deviance=pruneFit$dev)
# referrence plot for choosing tree size
plot(pruneFit$size,pruneFit$dev,type="b",col="#990000",lwd=2,main="title",xlab="size",ylab="deviance")
# prune for better prediction
pruneFitFinal <- prune.misclass(treeFit,best=2) # choose the tree size in best option
# tree model plot after pruning
plot(pruneFitFinal,col="steelblue")
text(pruneFitFinal, pretty = 0, cex = 1)
# user predict to change the variable value (need to split the categorical data and numeric data)
predClass <- predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2),type="class")
# prediction results
if (predClass == 1){
print("survive = 1")
} else {
print("survive = 0")
}
# prepare data for tree model
data_factor_tree <- factorData %>% select(time, creatinine,survive)
# fit the tree model
treeFit <- tree(survive ~ . ,data=data_factor_tree,split="deviance")
# result of tree model
summary(treeFit)
# tree model plot
plot(treeFit,col="steelblue")
text(treeFit, pretty = 0, cex = 1)
# referrence result for choosing tree size
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
data.frame(size=pruneFit$size,deviance=pruneFit$dev)
# referrence plot for choosing tree size
plot(pruneFit$size,pruneFit$dev,type="b",col="#990000",lwd=2,main="title",xlab="size",ylab="deviance")
# prune for better prediction
pruneFitFinal <- prune.misclass(treeFit,best=2) # choose the tree size in best option
# tree model plot after pruning
plot(pruneFitFinal,col="steelblue")
text(pruneFitFinal, pretty = 0, cex = 1)
# user predict to change the variable value (need to split the categorical data and numeric data)
predClass <- predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2),type="class")
# prediction results
if (predClass == 1){
print("survive = 1")
} else {
print("survive = 0")
}
# prepare data for tree model
data_factor_tree <- factorData %>% select(time, creatinine,survive)
# fit the tree model
treeFit <- tree(survive ~ . ,data=data_factor_tree,split="deviance")
# result of tree model
summary(treeFit)
# tree model plot
plot(treeFit,col="#990000")
text(treeFit, pretty = 0, cex = 1)
# referrence result for choosing tree size
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
data.frame(size=pruneFit$size,deviance=pruneFit$dev)
# referrence plot for choosing tree size
plot(pruneFit$size,pruneFit$dev,type="b",col="#990000",lwd=2,main="title",xlab="size",ylab="deviance")
# prune for better prediction
pruneFitFinal <- prune.misclass(treeFit,best=2) # choose the tree size in best option
# tree model plot after pruning
plot(pruneFitFinal,col="steelblue")
text(pruneFitFinal, pretty = 0, cex = 1)
# user predict to change the variable value (need to split the categorical data and numeric data)
predClass <- predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2),type="class")
# prediction results
if (predClass == 1){
print("survive = 1")
} else {
print("survive = 0")
}
# prepare data for tree model
data_factor_tree <- factorData %>% select(time, creatinine,survive)
# fit the tree model
treeFit <- tree(survive ~ . ,data=data_factor_tree,split="deviance")
# result of tree model
summary(treeFit)
# tree model plot
plot(treeFit,col="grey")
text(treeFit, pretty = 0, cex = 1)
# referrence result for choosing tree size
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
data.frame(size=pruneFit$size,deviance=pruneFit$dev)
# referrence plot for choosing tree size
plot(pruneFit$size,pruneFit$dev,type="b",col="#990000",lwd=2,main="title",xlab="size",ylab="deviance")
# prune for better prediction
pruneFitFinal <- prune.misclass(treeFit,best=2) # choose the tree size in best option
# tree model plot after pruning
plot(pruneFitFinal,col="steelblue")
text(pruneFitFinal, pretty = 0, cex = 1)
# user predict to change the variable value (need to split the categorical data and numeric data)
predClass <- predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2),type="class")
# prediction results
if (predClass == 1){
print("survive = 1")
} else {
print("survive = 0")
}
# prepare data for tree model
data_factor_tree <- factorData %>% select(time, creatinine,survive)
# fit the tree model
treeFit <- tree(survive ~ . ,data=data_factor_tree,split="deviance")
# result of tree model
summary(treeFit)
# tree model plot
plot(treeFit,col="grey")
text(treeFit, pretty = 0, cex = 1)
# referrence result for choosing tree size
pruneFit <- cv.tree(treeFit, FUN = prune.misclass)
pruneFit
data.frame(size=pruneFit$size,deviance=pruneFit$dev)
# referrence plot for choosing tree size
plot(pruneFit$size,pruneFit$dev,type="b",col="#990000",lwd=2,main="title",xlab="size",ylab="deviance")
# prune for better prediction
pruneFitFinal <- prune.misclass(treeFit,best=2) # choose the tree size in best option
# tree model plot after pruning
plot(pruneFitFinal,col="grey")
text(pruneFitFinal, pretty = 0, cex = 1)
# user predict to change the variable value (need to split the categorical data and numeric data)
predClass <- predict(pruneFitFinal, newdata = data.frame(time=10, creatinine=2),type="class")
# prediction results
if (predClass == 1){
print("survive = 1")
} else {
print("survive = 0")
}
setwd("D:/2020_3rd_semester/ST558/6. Project/Project3/ST558Project3")
library(knitr)
include_graphics("heatmap.jpg")
library(knitr)
include_graphics("heart.jpg")
library(knitr)
include_graphics("~heart.jpg")
library(knitr)
include_graphics("~/heart.jpg")
library(knitr)
include_graphics("heart.jpg")
library(knitr)
include_graphics("heart.jpg")
install.packages(c("dashboardthemes", "shinydashboard"))
shiny::runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='zhijun-liu',
token='2FE5514C1600E65396C8CAF76A2BA5C6',
secret='<SECRET>')
rsconnect::setAccountInfo(name='zhijun-liu',
token='2FE5514C1600E65396C8CAF76A2BA5C6',
secret='<SECRET>')
rsconnect::setAccountInfo(name='zhijun-liu',
token='2FE5514C1600E65396C8CAF76A2BA5C6',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='zhijun-liu',
token='2FE5514C1600E65396C8CAF76A2BA5C6',
secret='<SECRET>')
rsconnect::setAccountInfo(name='zhijun-liu',
token='2FE5514C1600E65396C8CAF76A2BA5C6',
secret='<SECRET>')
